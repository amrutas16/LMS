CREATE TABLE  "STUDENT_ENROLLMENT_INFO" 
   (	"S_ENROLLMENT_ID" NUMBER(10,0), 
	"S_CLASSIFICATION" VARCHAR2(15) NOT NULL, 
	"S_DEGREE_PROGRAM" VARCHAR2(15) NOT NULL, 
	"S_CATEGORY_OF_STUDENT" VARCHAR2(15) NOT NULL, 
	 PRIMARY KEY ("S_ENROLLMENT_ID")
   );

CREATE table "DEPARTMENT" (
    "D_NAME"     VARCHAR2(20),
	PRIMARY KEY ("D_NAME")
);

/*To maintain Patron is a relationship with student and faculty*/
CREATE table "PATRON" (
    "P_ID"       NUMBER(10),
    "P_DEPARTMENT" VARCHAR2(20) NOT NULL,
     PRIMARY KEY ("P_ID"),
     	FOREIGN KEY ("P_DEPARTMENT")
	  REFERENCES  "DEPARTMENT" ("D_NAME")
);

/* removed department and added  Patron id as foreign key */
/* Needs a trigger to insert before on student */
CREATE TABLE  "STUDENT" 
   (	"S_NUMBER" NUMBER(10), 
	"S_FIRST_NAME" VARCHAR2(15), 
	"S_LAST_NAME" VARCHAR2(15), 
	"S_PHONE_NO" NUMBER(10,0) NOT NULL, 
	"S_ALTERNATE_PHONE_NO" NUMBER(10,0), 
	"S_ADDRESS" VARCHAR2(50), 
	"S_DOB" DATE NOT NULL, 
	"S_SEX" VARCHAR2(8), 
	"S_NATIONALITY" VARCHAR2(15), 
	"S_ENROLLMENT_ID" NUMBER(10,0) NOT NULL, 
	 PRIMARY KEY ("S_NUMBER"),
	FOREIGN KEY ("S_NUMBER")
	  REFERENCES  "PATRON" ("P_ID") 
	 ON DELETE CASCADE,
	FOREIGN KEY ("S_DEPARTMENT")
	  REFERENCES  "DEPARTMENT" ("D_NAME"),
	FOREIGN KEY ("S_ENROLLMENT_ID")
	  REFERENCES  "STUDENT_ENROLLMENT_INFO" ("S_ENROLLMENT_ID")
   );

CREATE TABLE  "COURSE" 
   (	"COURSE_ID" NUMBER(6,0), 
	"COURSE_NAME" VARCHAR2(20) NOT NULL, 
	"COURSE_DESCRIPTION" VARCHAR2(256),  
	"ROOM_NO" VARCHAR2(10), 
	"INTAKE" NUMBER(5,0), 
	 PRIMARY KEY ("COURSE_ID")
   );


CREATE TABLE "FACULTY_CATEGORY"
(	"F_CATEGORY_OF_FACULTY" VARCHAR2(20), 
	 PRIMARY KEY ("F_CATEGORY_OF_FACULTY")
);

/* Needs a trigger BEFORE INSERT on patron */
CREATE TABLE  "FACULTY" 
(	"F_NUMBER" NUMBER(10,0), 
	"F_FIRST_NAME" VARCHAR2(15), 
	"F_LAST_NAME" VARCHAR2(15), 
	"F_CATEGORY_OF_FACULTY" VARCHAR2(20) NOT NULL, 
	"F_NATIONALITY" VARCHAR2(15), 
	"F_DEPARTMENT" VARCHAR2(20) NOT NULL,
	 PRIMARY KEY ("F_NUMBER"),
	FOREIGN KEY ("F_NUMBER")
	  REFERENCES  "PATRON" ("P_ID")
	  ON DELETE CASCADE,
	FOREIGN KEY ("F_DEPARTMENT")
	  REFERENCES  "DEPARTMENT" ("D_NAME"),
	FOREIGN KEY ("F_CATEGORY_OF_FACULTY")
	  REFERENCES  "FACULTY_CATEGORY" ("F_CATEGORY_OF_FACULTY")
);




CREATE table "TEACHES" (
"COURSE_NUMBER" NUMBER(6),
"FACULTY_ID"    NUMBER(10),
PRIMARY KEY ("COURSE_NUMBER","FACULTY_ID"),
FOREIGN KEY ("COURSE_NUMBER")
REFERENCES "COURSE" ("COURSE_ID")
ON DELETE CASCADE,
FOREIGN KEY ("FACULTY_ID")
REFERENCES "FACULTY" ("F_NUMBER")
ON DELETE CASCADE
);

CREATE table "ENROLLS" (
"STUDENT_ID" NUMBER(10),
"COURSE_NO"  NUMBER(6),
PRIMARY KEY ("STUDENT_ID","COURSE_NO"),
FOREIGN KEY ("STUDENT_ID")
REFERENCES "STUDENT" ("S_NUMBER")
ON DELETE CASCADE,
FOREIGN KEY ("COURSE_NO")
REFERENCES "COURSE" ("COURSE_ID")
ON DELETE CASCADE
);

CREATE TABLE "LIBRARY" (
"LIB_NAME" VARCHAR2(40),
    PRIMARY KEY ("LIB_NAME")
);


CREATE TABLE "RESOURCES"(
"R_ID" NUMBER(10),
"LIB_NAME" VARCHAR2(40),
"AVAIL" VARCHAR2(10),
PRIMARY KEY ("R_ID"),
FOREIGN KEY ("LIB_NAME")
REFERENCES "LIBRARY" ("LIB_NAME")
ON DELETE CASCADE,
CHECK (AVAIL IN ('Yes', 'No', 'Reserved'))
);

CREATE TABLE "PUBLICATION"(
"PUBLICATION_ID" VARCHAR2(15) UNIQUE,
"P_TYPE" VARCHAR2(15),
PRIMARY KEY ("PUBLICATION_ID","P_TYPE"),
CHECK (P_TYPE IN ('Electronic', 'Hardcopy'))
);

CREATE TABLE "AUTHORS" (
"PUBLICATION_ID" VARCHAR2(15),
"AUTHOR_NAME" VARCHAR2(50),
PRIMARY KEY ("PUBLICATION_ID","AUTHOR_NAME"),
FOREIGN KEY ("PUBLICATION_ID")
REFERENCES "PUBLICATION" ("PUBLICATION_ID")
ON DELETE CASCADE
);

/* NEEDS TRIGGER BEFORE ON PUBLICATION */

CREATE TABLE "JOURNAL" (
"R_ID" NUMBER(10),
"ISSN" VARCHAR2(15) UNIQUE,
"YEAR_PUBLISHED" NUMBER(4),
"J_TITLE" VARCHAR2(50) NOT NULL,
"P_TYPE" VARCHAR2(15),
PRIMARY KEY ("R_ID" ,"ISSN"),
FOREIGN KEY ("ISSN" )
REFERENCES "PUBLICATION"("PUBLICATION_ID" ) 
ON DELETE CASCADE,
FOREIGN KEY ("P_TYPE" )
REFERENCES "PUBLICATION"("P_TYPE" ),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE
);


/* NEEDS TRIGGER BEFORE ON PUBLICATION */
CREATE TABLE "CONF_PROCEEDINGS"(
"R_ID" NUMBER(10),
"CONF_NUM" VARCHAR2(15) UNIQUE,
"YEAR_PUBLISHED" NUMBER(4),
"NAME_OF_CONFERENCE" VARCHAR2(50),
"C_TITLE" VARCHAR2(50) NOT NULL,
"P_TYPE" VARCHAR2(15),
PRIMARY KEY("R_ID" ,"CONF_NUM" ),
FOREIGN KEY ("CONF_NUM" )
REFERENCES "PUBLICATION"("PUBLICATION_ID" ) 
ON DELETE CASCADE,
FOREIGN KEY ("P_TYPE" )
REFERENCES "PUBLICATION_TYPE"("P_TYPE" ),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE
);

/* NEEDS TRIGGER BEFORE ON PUBLICATION */
CREATE TABLE "BOOKS" (
"R_ID" NUMBER(10),
"ISBN" VARCHAR2(15) UNIQUE,
"B_TITLE" VARCHAR2(50) NOT NULL,
"B_EDITION" VARCHAR2(20),
"YEAR_PUBLISHED" NUMBER(4),
"B_PUBLISHER" VARCHAR2(20),
"P_TYPE" VARCHAR2(15),
PRIMARY KEY("R_ID" ,"ISBN" ),
FOREIGN KEY ("ISBN" )
REFERENCES "PUBLICATION"("PUBLICATION_ID" ) 
ON DELETE CASCADE,
FOREIGN KEY ("P_TYPE" )
REFERENCES "PUBLICATION_TYPE"("P_TYPE" ),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE
);

CREATE TABLE "COURSE_RESERVATION" (
"F_NUMBER" NUMBER(10,0),
"COURSE_ID" NUMBER(6,0),
"ISBN" VARCHAR2(15),
"START_DATE" DATE NOT NULL,
"END_DATE" DATE NOT NULL,
PRIMARY KEY ("F_NUMBER" , "COURSE_ID" , "ISBN"),
FOREIGN KEY ("F_NUMBER"  )
REFERENCES "FACULTY"("F_NUMBER"  )
ON DELETE CASCADE,
FOREIGN KEY ("COURSE_ID" )
REFERENCES "COURSE" ("COURSE_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("ISBN"  )
REFERENCES "BOOKS" ("ISBN"  )
ON DELETE CASCADE
);

CREATE TABLE "CHECKOUT" (
"C_ID" NUMBER(10),
"R_ID" NUMBER(10),
"P_ID" NUMBER(10),
"START_DATE" DATE NOT NULL,
"END_DATE" DATE,
"RETURN_DATE" DATE,
PRIMARY KEY ("C_ID"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("P_ID" )
REFERENCES "PATRON" ("P_ID" )
ON DELETE CASCADE
);

CREATE TABLE "QUEUE" (
"Q_ID" NUMBER(10),
"R_ID" NUMBER(10),
"P_ID" NUMBER(10),
PRIMARY KEY ("Q_ID"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("P_ID" )
REFERENCES "PATRON" ("P_ID" )
ON DELETE CASCADE
);

CREATE TABLE "REG_HOLD" (
"S_NUMBER" NUMBER(10,0),
PRIMARY KEY ("S_NUMBER") ,
FOREIGN KEY ("S_NUMBER")
REFERENCES "STUDENT" ("S_NUMBER")
ON DELETE CASCADE
);

CREATE TABLE "SUSPENDED_ACCOUNT" (
"P_ID" NUMBER(10),
PRIMARY KEY ("P_ID") ,
FOREIGN KEY ("P_ID")
REFERENCES "PATRON" ("P_ID")
ON DELETE CASCADE
);

/* Added Bill active/Noactive Y/N flag to check instead of history table */
CREATE TABLE "BILL" (
"B_ID" NUMBER(10),
"P_ID" NUMBER(10),
"R_ID" NUMBER(10),
"AMOUNT" NUMBER(10) DEFAULT 0 NOT NULL,
"B_DATE" DATE,
"RETURN_DATE" DATE,
"STATUS" VARCHAR2(1) DEFAULT 'Y', 
PRIMARY KEY ("B_ID"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("P_ID" )
REFERENCES "PATRON" ("P_ID" )
ON DELETE CASCADE,
CHECK (AVAIL IN ('Y', 'N'))
);

CREATE TABLE "REMINDER" (
"REMIND_ID" NUMBER(10),
"P_ID" NUMBER(10),
"R_ID" NUMBER(10),
"RETURN_DATE" DATE,
PRIMARY KEY ("REMIND_ID"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("P_ID" )
REFERENCES "PATRON" ("P_ID" )
ON DELETE CASCADE
);


CREATE TABLE "CAMERA" (
"R_ID" NUMBER(10),
"CAM_ID" NUMBER(10),
"MAKE" VARCHAR2(20),
"MODEL" VARCHAR2(20),
"LENS_CONFIG" VARCHAR2(20),
"MEMORY" VARCHAR2(20),
"LIB_NAME" VARCHAR2(40),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("LIB_NAME" )
REFERENCES "LIBRARY" ("LIB_NAME" )
ON DELETE CASCADE
);

CREATE TABLE "ROOM_CONSTRAINT" (
"RC_ID" NUMBER(4),
"TYPE" VARCHAR2(20),
"LIB_NAME" VARCHAR2(40),
"ACCESIBLE" VARCHAR2(30),
PRIMARY KEY ("RC_ID" ),
FOREIGN KEY ("LIB_NAME")
REFERENCES "LIBRARY" ("LIB_NAME")
ON DELETE CASCADE
);


CREATE TABLE "ROOM" (
"R_ID" NUMBER(10),
"ROOM_NO" NUMBER(10),
"POSITION" NUMBER(2),
"CAPACITY" NUMBER(3),
"RC_ID" NUMBER(4),
PRIMARY KEY ( "R_ID" ,"ROOM_NO"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("RC_ID")
REFERENCES "ROOM_CONSTRAINT" ("RC_ID")
);

CREATE TABLE "ROOM_CHECKOUT" (
"C_ID" NUMBER(10),
"R_ID" NUMBER(10),
"P_ID" NUMBER(10),
"START_DATE" DATE NOT NULL,
"END_DATE" DATE,
"CHECKEDOUT" VARCHAR2(1) NOT NULL,
PRIMARY KEY ("C_ID"),
FOREIGN KEY ("R_ID" )
REFERENCES "RESOURCES" ("R_ID" )
ON DELETE CASCADE,
FOREIGN KEY ("P_ID" )
REFERENCES "PATRON" ("P_ID" )
ON DELETE CASCADE,
CONSTRAINT LESS_THAN CHECK ( START_DATE <= END_DATE )
);
