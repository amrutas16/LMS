CREATE TABLE "STUDENT_ENROLLMENT_INFO"
  (
     "S_ENROLLMENT_INFO_ID"  NUMBER(10, 0),
     "S_CLASSIFICATION"      VARCHAR2(15) NOT NULL,
     "S_DEGREE_PROGRAM"      VARCHAR2(15) NOT NULL,
     "S_CATEGORY_OF_STUDENT" VARCHAR2(15) NOT NULL,
     PRIMARY KEY ("S_ENROLLMENT_INFO_ID")
  );

CREATE TABLE "DEPARTMENT"
  (
     "D_NAME" VARCHAR2(20),
     PRIMARY KEY ("D_NAME")
  );

/* To maintain Patron is a relationship with student and faculty*/
CREATE TABLE "PATRON"
  (
     "P_ID"         VARCHAR2(10),
	 "P_FIRST_NAME"         VARCHAR2(15),
     "P_LAST_NAME"          VARCHAR2(15),
	 "P_DEPARTMENT" VARCHAR2(20) NOT NULL,
     "P_TYPE" VARCHAR2(10),
     "SUSPENDED"    CHAR DEFAULT '0' NOT NULL,
     PRIMARY KEY ("P_ID"),
     FOREIGN KEY ("P_DEPARTMENT") REFERENCES "DEPARTMENT" ("D_NAME"),
	 CONSTRAINT BOOLEAN_VALUE CHECK ("SUSPENDED" IN (0,1)),
	 CONSTRAINT P_TYPE_CHECK CHECK ("P_TYPE" IN ('Student', 'Faculty'))
  );

/* removed department and added  Patron id as foreign key */
/* Needs a trigger to insert before on student */
CREATE TABLE "STUDENT"
  (
     "S_NUMBER"             VARCHAR2(10),
     "S_PHONE_NO"           NUMBER(10, 0) NOT NULL,
     "S_ALTERNATE_PHONE_NO" NUMBER(10, 0),
     "S_ADDRESS"            VARCHAR2(50),
     "S_DOB"                DATE NOT NULL,
     "S_SEX"                VARCHAR2(8),
     "S_NATIONALITY"        VARCHAR2(15),
     "S_ENROLLMENT_ID"      NUMBER(10, 0) NOT NULL,
     PRIMARY KEY ("S_NUMBER"),
     FOREIGN KEY ("S_NUMBER") REFERENCES "PATRON" ("P_ID") ON DELETE CASCADE,
     FOREIGN KEY ("S_ENROLLMENT_ID") REFERENCES "STUDENT_ENROLLMENT_INFO" ( "S_ENROLLMENT_INFO_ID")
  );

CREATE TABLE "COURSE"
  (
     "COURSE_ID"          VARCHAR2(6),
     "COURSE_NAME"        VARCHAR2(20) NOT NULL,
     "COURSE_DESCRIPTION" VARCHAR2(256),
     "ROOM_NO"            VARCHAR2(10),
     "INTAKE"             NUMBER(5, 0),
     PRIMARY KEY ("COURSE_ID")
  );


/* Needs a trigger BEFORE INSERT on patron */
CREATE TABLE "FACULTY"
  (
     "F_NUMBER"              VARCHAR2(10),
     "F_CATEGORY"            VARCHAR2(20) NOT NULL,
     "F_NATIONALITY"         VARCHAR2(15),
     PRIMARY KEY ("F_NUMBER"),
     FOREIGN KEY ("F_NUMBER") REFERENCES "PATRON" ("P_ID") ON DELETE CASCADE,
	 CONSTRAINT F_VALID_CATEGORY CHECK ("F_CATEGORY" IN ('Assistant Professor', 'Associate Professor', 'Professor', 'Lecturer'))
);
    
CREATE TABLE "TEACHES"
  (
     "COURSE_NUMBER" VARCHAR2(6),
     "FACULTY_ID"    VARCHAR2(10),
     PRIMARY KEY ("COURSE_NUMBER", "FACULTY_ID"),
     FOREIGN KEY ("COURSE_NUMBER") REFERENCES "COURSE" ("COURSE_ID") ON DELETE CASCADE,
     FOREIGN KEY ("FACULTY_ID") REFERENCES "FACULTY" ("F_NUMBER") ON DELETE CASCADE
  );

CREATE TABLE "ENROLLS"
  (
     "STUDENT_ID" VARCHAR2(10),
     "COURSE_NO"  VARCHAR2(6),
     PRIMARY KEY ("STUDENT_ID", "COURSE_NO"),
     FOREIGN KEY ("STUDENT_ID") REFERENCES "STUDENT" ("S_NUMBER") ON DELETE CASCADE,
     FOREIGN KEY ("COURSE_NO") REFERENCES "COURSE" ("COURSE_ID") ON DELETE CASCADE
  );

CREATE TABLE "LIBRARY"
  (
     "LIBRARY_NAME" VARCHAR2(40),
     PRIMARY KEY ("LIBRARY_NAME")
  );

CREATE TABLE "LIBRARY_RESOURCE"
  (
     "R_ID"     NUMBER(10),
     "LIBRARY_NAME" VARCHAR2(40),
     "AVAIL"    CHAR DEFAULT '1' NOT NULL,
     "RESOURCE_TYPE" VARCHAR2(30),
     PRIMARY KEY ("R_ID"),
     FOREIGN KEY ("LIBRARY_NAME") REFERENCES "LIBRARY" ("LIBRARY_NAME") ON DELETE CASCADE,
     CONSTRAINT R_AVAIL_VALID CHECK (AVAIL IN ('0', '1')),
     CONSTRAINT RESOURCE_TYPE_VALID CHECK ("RESOURCE_TYPE" IN ('Book', 'Journal', 'ConferenceProceeding', 'Camera','Room'))
  );

CREATE TABLE "PUBLICATION"
  (
     "PUBLICATION_ID" VARCHAR2(15),
     "P_TITLE"        VARCHAR2(100) NOT NULL,
     "YEAR_PUBLISHED" NUMBER(4),
     PRIMARY KEY ("PUBLICATION_ID")
  );

CREATE TABLE "AUTHOR"
  (
     "PUBLICATION_ID" VARCHAR2(15),
     "AUTHOR_NAME"    VARCHAR2(50),
     PRIMARY KEY ("PUBLICATION_ID", "AUTHOR_NAME"),
     FOREIGN KEY ("PUBLICATION_ID") REFERENCES "PUBLICATION" ("PUBLICATION_ID") ON DELETE CASCADE
  );

/* NEEDS TRIGGER BEFORE ON PUBLICATION */
CREATE TABLE "JOURNAL"
  (
     "R_ID"           NUMBER(10),
     "ISSN"           VARCHAR2(15),
     "P_TYPE"         VARCHAR2(15),
     PRIMARY KEY ("R_ID"),
     FOREIGN KEY ("ISSN" ) REFERENCES "PUBLICATION" ("PUBLICATION_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
	 CONSTRAINT J_TYPE_VALID CHECK (P_TYPE IN ('Electronic', 'Hardcopy'))
  );

/* NEEDS TRIGGER BEFORE ON PUBLICATION */
CREATE TABLE "CONF_PROCEEDINGS"
  (
     "R_ID"               NUMBER(10),
     "CONF_NUM"           VARCHAR2(15),
     "NAME_OF_CONFERENCE" VARCHAR2(100),
     "P_TYPE"             VARCHAR2(15),
     PRIMARY KEY("R_ID"),
     FOREIGN KEY ("CONF_NUM" ) REFERENCES "PUBLICATION"("PUBLICATION_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
	 CONSTRAINT C_TYPE_VALID CHECK (P_TYPE IN ('Electronic', 'Hardcopy'))
  );

/* NEEDS TRIGGER BEFORE ON PUBLICATION */
CREATE TABLE "BOOK"
  (
     "R_ID"           NUMBER(10),
     "ISBN"           VARCHAR2(15),
     "B_EDITION"      VARCHAR2(20),
     "B_PUBLISHER"    VARCHAR2(20),
     "P_TYPE"         VARCHAR2(15),
     PRIMARY KEY("R_ID"),
     FOREIGN KEY ("ISBN" ) REFERENCES "PUBLICATION"("PUBLICATION_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
	 CONSTRAINT B_TYPE_VALID CHECK (P_TYPE IN ('Electronic', 'Hardcopy'))
  );

 /* Need to check before insert that P_ID is an ISBN */
 /* Cannot reference BOOK directly since reserving a book reserves all copies of the book*/
CREATE TABLE "COURSE_RESERVATION"
  (
     "F_NUMBER"   VARCHAR2(10),
     "COURSE_ID"  VARCHAR2(6),
     "ISBN"       VARCHAR2(15),
     "START_DATE" DATE NOT NULL,
     "END_DATE"   DATE NOT NULL,
     PRIMARY KEY ("F_NUMBER", "COURSE_ID", "ISBN"),
     FOREIGN KEY ("F_NUMBER", "COURSE_ID") REFERENCES "TEACHES" ("FACULTY_ID", "COURSE_NUMBER") ON DELETE CASCADE,
     FOREIGN KEY ("ISBN" ) REFERENCES "PUBLICATION" ("PUBLICATION_ID" ) ON DELETE CASCADE,
     	CONSTRAINT FOUR_MONTH_CHECK CHECK (  END_DATE - START_DATE  <  120 )
  );

CREATE TABLE "CHECKOUT"
  (
     "C_ID"        NUMBER(10),
     "R_ID"        NUMBER(10),
     "P_ID"        VARCHAR2(10),
     "START_DATE"  DATE NOT NULL,
     "END_DATE"    DATE,
     "RETURN_DATE" DATE,
     PRIMARY KEY ("C_ID"),
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE,
	 CONSTRAINT CHKOUT_START_END CHECK ( START_DATE <= END_DATE )
  );

CREATE TABLE "QUEUE"
  (
     "Q_ID" NUMBER(10),
     "R_ID" NUMBER(10),
     "P_ID" VARCHAR2(10),
     PRIMARY KEY ("R_ID","P_ID"),
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE
  );

CREATE TABLE "REG_HOLD"
  (
     "S_NUMBER" VARCHAR2(10),
     "HOLD_TYPE" VARCHAR2(20) DEFAULT 'OTHER',
     PRIMARY KEY ("S_NUMBER"),
     FOREIGN KEY ("S_NUMBER") REFERENCES "STUDENT" ("S_NUMBER") ON DELETE CASCADE
  );

/* Added Bill active/Noactive Y/N flag to check instead of history table */
/* Bill LIBRARY_RESOURCE can only be a publication/camera*/
CREATE TABLE "BILL"
  (
     "B_ID"        NUMBER(10),
     "C_ID"  	   NUMBER(10),
     "AMOUNT"      NUMBER(10) DEFAULT 0 NOT NULL,
     "B_DATE"      DATE,
     "RETURN_DATE" DATE,
     "ACTIVE"      CHAR DEFAULT '1',
     PRIMARY KEY ("B_ID"),
     CHECK (ACTIVE IN (0, 1))
  );

  /* Reminders need to be worked out*/
CREATE TABLE "REMINDER"
  (
     "REMIND_ID"            NUMBER(10),
     "R_ID" NUMBER(10),
     "P_ID" VARCHAR2(10),
     "REMINDER_DESCRIPTION" VARCHAR2(300),
     "REMINDER_DATE"        DATE,
     PRIMARY KEY ("REMIND_ID"),     
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE
   );

CREATE TABLE "CAMERA"
  (
	"R_ID"	NUMBER(10),
	"CAM_ID" VARCHAR2(10),
	"MAKE"	VARCHAR2(20),
	"MODEL"	VARCHAR2(20),
	"LENS_CONFIG"	VARCHAR2(35),
	"MEMORY"      VARCHAR2(20),
	PRIMARY KEY (R_ID),
	FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE
  );

/* An entry for a request will be added in this table.*/
/* Once an entry is initiated a trigger is called - cam_queue_insert */
/* This makes sure that only 3 entries for a particular reosurce for that weekend is made*/
/* 2 procedures used for this purpose are cam_queue_insert,cam_queue_count*/

CREATE TABLE "CAM_QUEUE"
  (
	"Q_ID" NUMBER(10),
	"R_ID" NUMBER(10),	
	"P_ID" VARCHAR2(10),
	"CHECKOUT_DATE" DATE NOT NULL,
	"CONSIDERED"	CHAR DEFAULT '0',
	PRIMARY KEY ("R_ID","P_ID","CHECKOUT_DATE"),
	FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
	FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE,
	CONSTRAINT CONSIDERED CHECK ("CONSIDERED" IN ('0','1'))
  );

/* Q_ID needs a sequence */

/* While populating into above table, sequence vlaue will be called by using - seq_cam_queue.nextval */

/* A procedure will run which will insert the first person in queue for a particular cam R_ID into the checkout table*/

CREATE TABLE "CAMERA_CHECKOUT"
(	"C_ID"	NUMBER(10),
	"P_ID"	VARCHAR2(10),
	"R_ID"	NUMBER(10),
	"CHECKOUT_DATE" DATE NOT NULL,
	"DUE_DATE"	DATE,
	"CHECKED_OUT"	CHAR DEFAULT '0',
	"RETURN_DATE"	DATE,
	PRIMARY KEY ("C_ID"),
	FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE,	
	FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
	CONSTRAINT CAM_CHKOUT_START_END CHECK ( CHECKOUT_DATE <= DUE_DATE ),
	CONSTRAINT CHECKED_OUT CHECK ("CHECKED_OUT" IN ('0','1'))
);

CREATE TABLE "ROOM_CONSTRAINT"
  (
     "RC_ID"     NUMBER(4),
     "TYPE"      VARCHAR2(20),
     "LIBRARY_NAME"  VARCHAR2(40),
     PRIMARY KEY ("RC_ID" ),
     CONSTRAINT TYPE_CHECK CHECK ("TYPE" IN ('Conference Room', 'Study Room')),
     FOREIGN KEY ("LIBRARY_NAME") REFERENCES "LIBRARY" ("LIBRARY_NAME") ON DELETE CASCADE
  );

CREATE TABLE "ROOM"
  (
     "R_ID"     NUMBER(10),
     "ROOM_NO"  VARCHAR2(10),
     "POSITION" VARCHAR2(20),
     "CAPACITY" NUMBER(3),
     "RC_ID"    NUMBER(4),
     PRIMARY KEY ( "R_ID", "ROOM_NO"),
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("RC_ID") REFERENCES "ROOM_CONSTRAINT" ("RC_ID")
  );

/* Delete once done*/
/* CHECKEDOUT Flag - 0: Room Reserved, 1: Room Checked out, 2: Room checked in,*/
/* 3: Room checked in automatically if patron doesn't check out*/
/* 4: Room checked in automatically at the end of reservation*/
CREATE TABLE "ROOM_CHECKOUT"
  (
     "C_ID"       NUMBER(10),
     "R_ID"       NUMBER(10),
     "P_ID"       VARCHAR2(10),
     "START_DATE" DATE NOT NULL,
     "END_DATE"   DATE NOT NULL,
     "CHECKEDOUT" CHAR(1) DEFAULT '0' NOT NULL ,
     PRIMARY KEY ("C_ID"),
     FOREIGN KEY ("R_ID" ) REFERENCES "LIBRARY_RESOURCE" ("R_ID" ) ON DELETE CASCADE,
     FOREIGN KEY ("P_ID" ) REFERENCES "PATRON" ("P_ID" ) ON DELETE CASCADE,
     CONSTRAINT LESS_THAN CHECK ( START_DATE < END_DATE ),
     CONSTRAINT BOOLEAN_VALUE_CHECKEDOUT CHECK ("CHECKEDOUT" IN (0,1,2,3,4))
  );

CREATE TABLE "LOGIN"
  (
     "P_ID"     VARCHAR2(10),
     "USER_ID" VARCHAR2(20) , 
     "PASSWORD" VARCHAR2(20) DEFAULT '1234567' NOT NULL,
     PRIMARY KEY ("P_ID"),
     FOREIGN KEY ("P_ID") REFERENCES PATRON ON DELETE CASCADE
  );
